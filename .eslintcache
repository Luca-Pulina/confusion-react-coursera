[{"C:\\myTut\\react\\confusion\\confusion-cli\\src\\index.js":"1","C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\comments.js":"2","C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\ActionCreator.js":"3","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\HeaderComponent.js":"4","C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\ActionTypes.js":"5","C:\\myTut\\react\\confusion\\confusion-cli\\src\\shared\\dishes.js":"6","C:\\myTut\\react\\confusion\\confusion-cli\\src\\shared\\comments.js":"7","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\MainComponent.js":"8","C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\promotions.js":"9","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\MenuComponent.js":"10","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\HomeComponent.js":"11","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\DishdetailComponent.js":"12","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\AboutComponent.js":"13"},{"size":639,"mtime":1610120740255,"results":"14","hashOfConfig":"15"},{"size":569,"mtime":1610812244006,"results":"16","hashOfConfig":"15"},{"size":4310,"mtime":1610815467393,"results":"17","hashOfConfig":"15"},{"size":5121,"mtime":1610459922360,"results":"18","hashOfConfig":"15"},{"size":411,"mtime":1610804945921,"results":"19","hashOfConfig":"15"},{"size":1614,"mtime":1610197628839,"results":"20","hashOfConfig":"15"},{"size":4279,"mtime":1610197684195,"results":"21","hashOfConfig":"15"},{"size":3590,"mtime":1610825636406,"results":"22","hashOfConfig":"15"},{"size":628,"mtime":1610805632775,"results":"23","hashOfConfig":"15"},{"size":2089,"mtime":1610806623733,"results":"24","hashOfConfig":"15"},{"size":1613,"mtime":1610815310855,"results":"25","hashOfConfig":"15"},{"size":7057,"mtime":1610812957538,"results":"26","hashOfConfig":"15"},{"size":4479,"mtime":1610223197626,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"mlvugj",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\myTut\\react\\confusion\\confusion-cli\\src\\index.js",[],["56","57"],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\comments.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\ActionCreator.js",["58"],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\HeaderComponent.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\ActionTypes.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\shared\\dishes.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\shared\\comments.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\MainComponent.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\redux\\promotions.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\MenuComponent.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\HomeComponent.js",[],"C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\DishdetailComponent.js",["59","60","61"],"import React, { Component } from 'react';\r\nimport {\r\n    Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button,\r\n    Modal, ModalHeader, ModalBody,\r\n    Row, Col, Label\r\n} from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Link } from 'react-router-dom';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\nconst RenderComments = ({ comments, postComment, dishId }) => {\r\n    return (\r\n        <>\r\n            <h4>Comments</h4>\r\n            <ul className=\"list-unstyled\">\r\n                {comments && comments.map((dishesComment) => {\r\n                    return (\r\n                        <li>\r\n                            <p>{dishesComment.comment}</p>\r\n                            <p>-- {dishesComment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(dishesComment.date)))}</p>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <CommentForm dishId={dishId} postComment={postComment} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst RenderDish = (props) => {\r\n    if (props.isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.errMess) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{props.errMess}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    else if (props.dish != null) return (\r\n        props.dish && <Card>\r\n            <CardImg top src={baseUrl + props.dish.image} alt={props.dish.name} />\r\n            <CardBody>\r\n                <CardTitle>{props.dish.name}</CardTitle>\r\n                <CardText>{props.dish.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n\r\n    )\r\n\r\n}\r\n\r\nconst DishDetail = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <Breadcrumb>\r\n\r\n                    <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                </Breadcrumb>\r\n                <div className=\"col-12\">\r\n                    <h3>{props.dish.name}</h3>\r\n                    <hr />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderDish dish={props.dish} />\r\n                </div>\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <RenderComments comments={props.comments}\r\n                    postComment={props.postComment} \r\n                    dishId={props.dish.id}  />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isModalOpen: false\r\n        };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleSubmit(values) {\r\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"rating\" sm={12}>Rating</Label>\r\n                                <Col sm={12}>\r\n                                    <Control.select defaultValue=\"1\" model=\".rating\" id=\"rating\" name=\"rating\" className=\"form-control\">\r\n                                        <option value=\"1\">1</option>\r\n                                        <option value=\"2\">2</option>\r\n                                        <option value=\"3\">3</option>\r\n                                        <option value=\"4\">4</option>\r\n                                        <option value=\"5\">5</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"author\" sm={12}>Your Name</Label>\r\n                                <Col sm={12}>\r\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                        placeholder=\"Your Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                    />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".author\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"feedback\"  md={12}>Your feedback</Label>\r\n                                <Col  md={12}>\r\n                                    <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" resize=\"none\" rows=\"6\" className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n                <Button outline color=\"secondary\" onClick={this.toggleModal}><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment </Button>\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default DishDetail;","C:\\myTut\\react\\confusion\\confusion-cli\\src\\components\\AboutComponent.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":10,"nodeType":"68","messageId":"69","endLine":2,"endColumn":16},{"ruleId":"70","severity":1,"message":"71","line":131,"column":37,"nodeType":"72","endLine":131,"endColumn":137},{"ruleId":"70","severity":1,"message":"73","line":143,"column":37,"nodeType":"72","endLine":149,"endColumn":39},{"ruleId":"70","severity":1,"message":"74","line":165,"column":37,"nodeType":"72","endLine":165,"endColumn":150},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'DISHES' is defined but never used.","Identifier","unusedVar","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]